// -----------  Permission Enforcement Module -----------
int enforcePermission(User user, const char* filename, const char* action) {
    if (strcmp(filename, "config.txt") == 0 &&
        (strcmp(action, "write") == 0 || strcmp(action, "delete") == 0)) {
        return isAdmin(user);
    }
    return 1; // Allow all other operations
}

// ----------- Main Program -----------
int main() {
    User currentUser;
    int choice, fileChoice;
    char action[10];
    char files[3][30] = {"config.txt", "report.txt", "data.csv"};

    // Login input
    printf("=== Access Control System ===\n");
    printf("Enter username: ");
    scanf("%s", currentUser.username);
    printf("Enter role (admin/user): ");
    scanf("%s", currentUser.role);

    do {
        printf("\nAvailable Files:\n");
        for (int i = 0; i < 3; i++) {
                     printf("%d. %s\n", i + 1, files[i]);
        }

        printf("Choose a file (1-3): ");
        scanf("%d", &fileChoice);

        if (fileChoice < 1 || fileChoice > 3) {
            printf("Invalid file selection.\n");
            continue;
        }

        printf("Enter action (read/write/delete): ");
        scanf("%s", action);

        char* selectedFile = files[fileChoice - 1];
        int allowed = enforcePermission(currentUser, selectedFile, action);
        logAccess(currentUser.username, action, selectedFile, allowed);

        if (allowed) {
            printf("✅Access GRANTED: You can %s %s\n", action, selectedFile);
        } else {
            printf(" Access DENIED: You cannot %s %s\n", action, selectedFile);
        }

        printf("\nDo you want to try another operation? (1 = Yes, 0 = No): ");
        scanf("%d", &choice);
    } while (choice == 1);

    printf("\nSystem exiting... Goodbye!\n");
    return 0;
}
